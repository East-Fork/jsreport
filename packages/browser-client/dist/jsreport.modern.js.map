{"version":3,"file":"jsreport.modern.js","sources":["../src/jsreport.js"],"sourcesContent":["/* globals jsreportInit */\r\nimport { saveAs } from 'file-saver'\r\n\r\nclass RenderResponse {\r\n  constructor (res) {\r\n    this._response = res\r\n  }\r\n\r\n  /**\r\n   * Return the fetch original response\r\n   */\r\n  get response () {\r\n    return this._response\r\n  }\r\n\r\n  /**\r\n   * Returns Promise<string> content of the response\r\n   * @returns {Promise<string>}\r\n   */\r\n  async toString () {\r\n    const blob = await this.response.blob()\r\n    return blob.text()\r\n  }\r\n\r\n  /**\r\n   * Invoke save of the output content as the file\r\n   * @param {string} afilename  - filename to save the file as\r\n   */\r\n  async download (afilename) {\r\n    const blob = await this.response.blob()\r\n    saveAs(blob, afilename)\r\n  }\r\n\r\n  /**\r\n   * Returns Promise<Blob> content of the response\r\n   * @returns {Promise<Blob>}\r\n   */\r\n  async toBlob () {\r\n    return this.response.blob()\r\n  }\r\n\r\n  /**\r\n   *  Return Promise<string> data URI of the response\r\n   * @returns {Promise<string>}\r\n   */\r\n  async toDataURI () {\r\n    const reader = new FileReader()\r\n    const blob = await this.response.blob()\r\n    return new Promise((resolve) => {\r\n      reader.onload = function (e) {\r\n        resolve(reader.result)\r\n      }\r\n      reader.readAsDataURL(blob)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Opens the response content in a new browser window\r\n   * @param {Object} options - optinal configs passed to the window.open\r\n   * @param {string} options.windowName - name of the window\r\n   * @param {string} options.windowFeatures - features of the window\r\n   * @param {Number} options.cleanInterval - how often to check if the window is closed to clean up the object URL\r\n   * @returns {Promise<Window}\r\n   */\r\n  async openInWindow ({\r\n    cleanInterval = 5000,\r\n    windowName,\r\n    windowFeatures\r\n  } = { }) {\r\n    const blob = await this.response.blob()\r\n    const objectURL = URL.createObjectURL(blob, windowName, windowFeatures)\r\n    const w = window.open(objectURL)\r\n    const interval = setInterval(() => {\r\n      if (w.closed) {\r\n        URL.revokeObjectURL(objectURL)\r\n        clearInterval(interval)\r\n      }\r\n    }, cleanInterval)\r\n    return w\r\n  }\r\n\r\n  /**\r\n   * Return the response as object URL. Remember you need to revoke the object URL when you are done with it\r\n   * @returns {Promise<string>}\r\n   */\r\n  async toObjectURL () {\r\n    const blob = await this.response.blob()\r\n    return URL.createObjectURL(blob)\r\n  }\r\n}\r\n\r\nclass JsReportClient {\r\n  constructor () {\r\n    this.headers = {}\r\n  }\r\n\r\n  async _jsreportRequest ({ method, path, body }) {\r\n    if (!this.serverUrl) {\r\n      throw new Error('The script was not linked from jsreport. You need to fill jsreport.serverUrl property with valid url to jsreport server.')\r\n    }\r\n\r\n    let res\r\n    try {\r\n      res = await fetch(this.serverUrl + path, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...this.headers\r\n        },\r\n        body: body != null ? JSON.stringify(body) : null,\r\n        method\r\n      })\r\n    } catch (e) {\r\n      throw new Error('Failed to connect to jsreport server.')\r\n    }\r\n\r\n    if (!res.ok) {\r\n      let error = {\r\n        message: `jsreport server responded with error. status text: ${res.statusText}, status code: ${res.status}`\r\n      }\r\n      try {\r\n        const blob = await res.blob()\r\n        const text = await blob.text()\r\n        const remoteError = JSON.parse(text)\r\n        error = {\r\n          ...remoteError,\r\n          message: `${error.message}, details: ${remoteError.message}`\r\n        }\r\n      } catch (e) {\r\n\r\n      }\r\n      const returnError = new Error(error.message)\r\n      Object.assign(returnError, {\r\n        status: res.status,\r\n        statusText: res.statusText,\r\n        error\r\n      })\r\n      throw returnError\r\n    }\r\n\r\n    return res\r\n  }\r\n\r\n  /**\r\n   * Render report in remote server\r\n   * @param {RenderRequest} renderRequest\r\n   * @returns {Promise<RenderResponse>}\r\n   */\r\n  async render (renderRequest) {\r\n    const res = await this._jsreportRequest({ method: 'POST', path: '/api/report', body: renderRequest })\r\n    return new RenderResponse(res)\r\n  }\r\n\r\n  /**\r\n   * Create new instance of the client, this is rarely needed and you can use the default in the most of the cases\r\n   * @returns {JsReportClient}\r\n   */\r\n  createClient () {\r\n    return new JsReportClient()\r\n  }\r\n}\r\n\r\nconst jsreportInstance = new JsReportClient()\r\nsetTimeout(function () {\r\n  if (window.jsreportInit !== undefined) {\r\n    jsreportInit(jsreportInstance)\r\n  }\r\n}, 0)\r\n\r\nexport default jsreportInstance\r\n"],"names":["RenderResponse","constructor","res","this","_response","response","async","blob","text","afilename","saveAs","reader","FileReader","Promise","resolve","onload","e","result","readAsDataURL","cleanInterval","windowName","windowFeatures","objectURL","URL","createObjectURL","w","window","open","interval","setInterval","closed","revokeObjectURL","clearInterval","JsReportClient","headers","method","path","body","serverUrl","Error","fetch","JSON","stringify","ok","error","message","statusText","status","remoteError","parse","returnError","Object","assign","renderRequest","_jsreportRequest","createClient","jsreportInstance","setTimeout","undefined","jsreportInit"],"mappings":"4zFAGA,MAAMA,EACJC,YAAaC,GACXC,KAAKC,UAAYF,EAMfG,eACF,YAAYD,UAOAE,iBAEZ,kBADwBD,SAASE,QACrBC,OAOAF,eAAEG,GACd,MAAMF,aAAkBF,SAASE,OACjCG,SAAOH,EAAME,GAOHH,eACV,YAAYD,SAASE,OAORD,kBACb,MAAMK,EAAS,IAAIC,WACbL,aAAkBF,SAASE,OACjC,WAAWM,QAASC,IAClBH,EAAOI,OAAS,SAAUC,GACxBF,EAAQH,EAAOM,SAEjBN,EAAOO,cAAcX,KAYPD,oBAAEa,cAClBA,EAAgB,IADEC,WAElBA,EAFkBC,eAGlBA,GACE,IACF,MAAMd,aAAkBF,SAASE,OAC3Be,EAAYC,IAAIC,gBAAgBjB,EAAMa,EAAYC,GAClDI,EAAIC,OAAOC,KAAKL,GAChBM,EAAWC,YAAY,KACvBJ,EAAEK,SACJP,IAAIQ,gBAAgBT,GACpBU,cAAcJ,KAEfT,GACH,OAAOM,EAOQnB,oBACf,MAAMC,aAAkBF,SAASE,OACjC,OAAOgB,IAAIC,gBAAgBjB,IAI/B,MAAM0B,EACJhC,cACEE,KAAK+B,QAAU,GAGK5B,wBAAE6B,OAAEA,EAAFC,KAAUA,EAAVC,KAAgBA,IACtC,IAAKlC,KAAKmC,UACR,UAAUC,MAAM,4HAGlB,IAAIrC,EACJ,IACEA,QAAYsC,MAAMrC,KAAKmC,UAAYF,EAAM,CACvCF,WACE,eAAgB,oBACb/B,KAAK+B,SAEVG,KAAc,MAARA,EAAeI,KAAKC,UAAUL,GAAQ,KAC5CF,OAAAA,IAEF,MAAOnB,GACP,UAAUuB,MAAM,yCAGlB,IAAKrC,EAAIyC,GAAI,CACX,IAAIC,EAAQ,CACVC,QAAU,sDAAqD3C,EAAI4C,4BAA4B5C,EAAI6C,UAErG,IACE,MAAMxC,QAAaL,EAAIK,OACjBC,QAAaD,EAAKC,OAClBwC,EAAcP,KAAKQ,MAAMzC,GAC/BoC,OACKI,GACHH,QAAU,GAAED,EAAMC,qBAAqBG,EAAYH,YAErD,MAAO7B,IAGT,MAAMkC,EAAc,IAAIX,MAAMK,EAAMC,SAMpC,MALAM,OAAOC,OAAOF,EAAa,CACzBH,OAAQ7C,EAAI6C,OACZD,WAAY5C,EAAI4C,WAChBF,MAAAA,IAEIM,EAGR,OAAOhD,EAQGI,aAAE+C,GACZ,MAAMnD,aAAiBoD,iBAAiB,CAAEnB,OAAQ,OAAQC,KAAM,cAAeC,KAAMgB,IACrF,WAAWrD,EAAeE,GAO5BqD,eACE,WAAWtB,GAITuB,MAAAA,EAAmB,IAAIvB,EAC7BwB,WAAW,gBACmBC,IAAxBhC,OAAOiC,cACTA,aAAaH,IAEd"}