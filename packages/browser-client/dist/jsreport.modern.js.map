{"version":3,"file":"jsreport.modern.js","sources":["../src/jsreport.js"],"sourcesContent":["/* globals jsreportInit */\r\nimport { saveAs } from 'file-saver'\r\n\r\nclass RenderResponse {\r\n  constructor (res) {\r\n    this._response = res\r\n  }\r\n\r\n  /**\r\n   * Return the fetch original response\r\n   */\r\n  get response () {\r\n    return this._response\r\n  }\r\n\r\n  /**\r\n   * Returns Promise<string> content of the response\r\n   * @returns {Promise<string>}\r\n   */\r\n  async toString () {\r\n    const blob = await this.response.blob()\r\n    return blob.text()\r\n  }\r\n\r\n  /**\r\n   * Invoke save of the output content as the file\r\n   * @param {string} afilename  - filename to save the file as\r\n   */\r\n  async download (afilename) {\r\n    const blob = await this.response.blob()\r\n    saveAs(blob, afilename)\r\n  }\r\n\r\n  /**\r\n   * Returns Promise<Blob> content of the response\r\n   * @returns {Promise<Blob>}\r\n   */\r\n  async toBlob () {\r\n    return this.response.blob()\r\n  }\r\n\r\n  /**\r\n   *  Return Promise<string> data URI of the response\r\n   * @returns {Promise<string>}\r\n   */\r\n  async toDataURI () {\r\n    const reader = new FileReader()\r\n    const blob = await this.response.blob()\r\n    return new Promise((resolve) => {\r\n      reader.onload = function (e) {\r\n        resolve(reader.result)\r\n      }\r\n      reader.readAsDataURL(blob)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Opens the response content in a new browser window\r\n   * @param {Object} options - optinal configs passed to the window.open\r\n   * @param {string} options.windowName - name of the window\r\n   * @param {string} options.windowFeatures - features of the window\r\n   * @param {Number} options.cleanInterval - how often to check if the window is closed to clean up the object URL\r\n   * @param {Number} options.title - tab title name\r\n   * @returns {Promise<Window}\r\n   */\r\n  async openInWindow ({\r\n    cleanInterval = 5000,\r\n    windowName,\r\n    windowFeatures,\r\n    title\r\n  } = { }) {\r\n    const blob = await this.response.blob()\r\n    const objectURL = URL.createObjectURL(blob, windowName, windowFeatures)\r\n\r\n    const previewURL = window.URL.createObjectURL(new Blob([`\r\n    <html>\r\n      <head>\r\n        <title>${title || 'report'}</title>\r\n        <style>\r\n          html, body {\r\n            margin: 0px;\r\n            width: 100%;\r\n            height: 100%;\r\n          }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <iframe src=\"${objectURL}\" frameborder=\"0\" width=\"100%\" height=\"100%\" />\r\n      </body>\r\n    </html>\r\n  `], { type: 'text/html' }))\r\n\r\n    const w = window.open(previewURL)\r\n    const interval = setInterval(() => {\r\n      if (w && w.closed) {\r\n        URL.revokeObjectURL(objectURL)\r\n        URL.revokeObjectURL(previewURL)\r\n        clearInterval(interval)\r\n      }\r\n    }, cleanInterval)\r\n    return w\r\n  }\r\n\r\n  /**\r\n   * Return the response as object URL. Remember you need to revoke the object URL when you are done with it\r\n   * @returns {Promise<string>}\r\n   */\r\n  async toObjectURL () {\r\n    const blob = await this.response.blob()\r\n    return URL.createObjectURL(blob)\r\n  }\r\n}\r\n\r\nclass JsReportClient {\r\n  constructor () {\r\n    this.headers = {}\r\n  }\r\n\r\n  async _jsreportRequest ({ method, path, body }) {\r\n    if (!this.serverUrl) {\r\n      throw new Error('The script was not linked from jsreport. You need to fill jsreport.serverUrl property with valid url to jsreport server.')\r\n    }\r\n\r\n    let res\r\n    try {\r\n      res = await fetch(this.serverUrl + path, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...this.headers\r\n        },\r\n        body: body != null ? JSON.stringify(body) : null,\r\n        method\r\n      })\r\n    } catch (e) {\r\n      throw new Error('Failed to connect to jsreport server.')\r\n    }\r\n\r\n    if (!res.ok) {\r\n      let error = {\r\n        message: `jsreport server responded with error. status text: ${res.statusText}, status code: ${res.status}`\r\n      }\r\n      try {\r\n        const blob = await res.blob()\r\n        const text = await blob.text()\r\n        const remoteError = JSON.parse(text)\r\n        error = {\r\n          ...remoteError,\r\n          message: `${error.message}, details: ${remoteError.message}`\r\n        }\r\n      } catch (e) {\r\n\r\n      }\r\n      const returnError = new Error(error.message)\r\n      Object.assign(returnError, {\r\n        status: res.status,\r\n        statusText: res.statusText,\r\n        error\r\n      })\r\n      throw returnError\r\n    }\r\n\r\n    return res\r\n  }\r\n\r\n  _submitFormRequest (req, target, title) {\r\n    const mapForm = document.createElement('form')\r\n    mapForm.target = target\r\n    mapForm.id = new Date().getTime()\r\n    mapForm.method = 'POST'\r\n    mapForm.action = this.serverUrl + '/api/report/' + encodeURIComponent(title)\r\n\r\n    const input = document.createElement('input')\r\n    input.type = 'hidden'\r\n    input.name = 'renderRequestContent'\r\n    input.value = JSON.stringify(req)\r\n    mapForm.appendChild(input)\r\n    document.body.appendChild(mapForm)\r\n\r\n    function submit (i) {\r\n      if (i > 10) {\r\n        return console.log('Unable to submit render form.')\r\n      }\r\n      try {\r\n        mapForm.submit()\r\n        mapForm.outerHTML = ''\r\n      } catch (e) {\r\n        setTimeout(function () {\r\n          submit(i + 1)\r\n        }, 50)\r\n      }\r\n    }\r\n\r\n    submit(0)\r\n  }\r\n\r\n  /**\r\n   * Render report in remote server and initiate download\r\n   * This method doesnt support submiting to jsreport with authentification enabled\r\n   * @param {filename} new tab title\r\n   * @param {RenderRequest} renderRequest\r\n   */\r\n  download (filename, req) {\r\n    const request = Object.assign({}, req)\r\n    request.options = Object.assign({}, request.options)\r\n    if (request.options['Content-Disposition'] == null) {\r\n      request.options['Content-Disposition'] = `attachment; filename=\"${filename}\"`\r\n    }\r\n    this._submitFormRequest(request, '_self', filename)\r\n  }\r\n\r\n  /**\r\n   * Render report in remote server and open in new tab\r\n   * This method doesnt support submiting to jsreport with authentification enabled\r\n   * @param {Object} options\r\n   * @param {string} options.filename\r\n   * @param {string} options.title\r\n   * @param {RenderRequest} renderRequest\r\n   */\r\n  openInWindow ({ title, filename }, req) {\r\n    const request = Object.assign({}, req)\r\n    if (filename) {\r\n      request.options = Object.assign({}, request.options)\r\n      if (request.options['Content-Disposition'] == null) {\r\n        request.options['Content-Disposition'] = `inline; filename=\"${filename}\"`\r\n      }\r\n    }\r\n\r\n    this._submitFormRequest(request, '_blank', title)\r\n  }\r\n\r\n  /**\r\n   * Render report in remote server\r\n   * @param {RenderRequest} renderRequest\r\n   * @returns {Promise<RenderResponse>}\r\n   */\r\n  async render (renderRequest) {\r\n    const res = await this._jsreportRequest({ method: 'POST', path: '/api/report', body: renderRequest })\r\n    return new RenderResponse(res)\r\n  }\r\n\r\n  /**\r\n   * Create new instance of the client, this is rarely needed and you can use the default in the most of the cases\r\n   * @returns {JsReportClient}\r\n   */\r\n  createClient () {\r\n    return new JsReportClient()\r\n  }\r\n}\r\n\r\nconst jsreportInstance = new JsReportClient()\r\nsetTimeout(function () {\r\n  if (window.jsreportInit !== undefined) {\r\n    jsreportInit(jsreportInstance)\r\n  }\r\n}, 0)\r\n\r\nexport default jsreportInstance\r\n"],"names":["RenderResponse","constructor","res","this","_response","response","async","blob","text","afilename","saveAs","reader","FileReader","Promise","resolve","onload","e","result","readAsDataURL","cleanInterval","windowName","windowFeatures","title","objectURL","URL","createObjectURL","previewURL","window","Blob","type","w","open","interval","setInterval","closed","revokeObjectURL","clearInterval","JsReportClient","headers","method","path","body","serverUrl","Error","fetch","JSON","stringify","ok","error","message","statusText","status","remoteError","parse","returnError","Object","assign","_submitFormRequest","req","target","mapForm","document","createElement","id","Date","getTime","action","encodeURIComponent","input","name","value","appendChild","submit","i","console","log","outerHTML","setTimeout","download","filename","request","options","openInWindow","renderRequest","_jsreportRequest","createClient","jsreportInstance","undefined","jsreportInit"],"mappings":"4zFAGA,MAAMA,EACJC,YAAaC,GACXC,KAAKC,UAAYF,EAMfG,eACF,YAAYD,UAOAE,iBAEZ,kBADwBD,SAASE,QACrBC,OAOAF,eAAEG,GACd,MAAMF,aAAkBF,SAASE,OACjCG,SAAOH,EAAME,GAOHH,eACV,YAAYD,SAASE,OAORD,kBACb,MAAMK,EAAS,IAAIC,WACbL,aAAkBF,SAASE,OACjC,WAAWM,QAASC,IAClBH,EAAOI,OAAS,SAAUC,GACxBF,EAAQH,EAAOM,SAEjBN,EAAOO,cAAcX,KAaPD,oBAAEa,cAClBA,EAAgB,IADEC,WAElBA,EAFkBC,eAGlBA,EAHkBC,MAIlBA,GACE,IACF,MAAMf,aAAkBF,SAASE,OAC3BgB,EAAYC,IAAIC,gBAAgBlB,EAAMa,EAAYC,GAElDK,EAAaC,OAAOH,IAAIC,gBAAgB,IAAIG,KAAK,CAAE,8CAG5CN,GAAS,8NAUHC,oFAGjB,CAAEM,KAAM,eAEJC,EAAIH,OAAOI,KAAKL,GAChBM,EAAWC,YAAY,KACvBH,GAAKA,EAAEI,SACTV,IAAIW,gBAAgBZ,GACpBC,IAAIW,gBAAgBT,GACpBU,cAAcJ,KAEfb,GACH,OAAOW,EAOQxB,oBACf,MAAMC,aAAkBF,SAASE,OACjC,OAAOiB,IAAIC,gBAAgBlB,IAI/B,MAAM8B,EACJpC,cACEE,KAAKmC,QAAU,GAGKhC,wBAAEiC,OAAEA,EAAFC,KAAUA,EAAVC,KAAgBA,IACtC,IAAKtC,KAAKuC,UACR,UAAUC,MAAM,4HAGlB,IAAIzC,EACJ,IACEA,QAAY0C,MAAMzC,KAAKuC,UAAYF,EAAM,CACvCF,WACE,eAAgB,oBACbnC,KAAKmC,SAEVG,KAAc,MAARA,EAAeI,KAAKC,UAAUL,GAAQ,KAC5CF,OAAAA,IAEF,MAAOvB,GACP,UAAU2B,MAAM,yCAGlB,IAAKzC,EAAI6C,GAAI,CACX,IAAIC,EAAQ,CACVC,QAAU,sDAAqD/C,EAAIgD,4BAA4BhD,EAAIiD,UAErG,IACE,MAAM5C,QAAaL,EAAIK,OACjBC,QAAaD,EAAKC,OAClB4C,EAAcP,KAAKQ,MAAM7C,GAC/BwC,OACKI,GACHH,QAAU,GAAED,EAAMC,qBAAqBG,EAAYH,YAErD,MAAOjC,IAGT,MAAMsC,EAAc,IAAIX,MAAMK,EAAMC,SAMpC,MALAM,OAAOC,OAAOF,EAAa,CACzBH,OAAQjD,EAAIiD,OACZD,WAAYhD,EAAIgD,WAChBF,MAAAA,IAEIM,EAGR,OAAOpD,EAGTuD,mBAAoBC,EAAKC,EAAQrC,GAC/B,MAAMsC,EAAUC,SAASC,cAAc,QACvCF,EAAQD,OAASA,EACjBC,EAAQG,IAAK,IAAIC,MAAOC,UACxBL,EAAQrB,OAAS,OACjBqB,EAAQM,OAAS/D,KAAKuC,UAAY,eAAiByB,mBAAmB7C,GAEtE,MAAM8C,EAAQP,SAASC,cAAc,SACrCM,EAAMvC,KAAO,SACbuC,EAAMC,KAAO,uBACbD,EAAME,MAAQzB,KAAKC,UAAUY,GAC7BE,EAAQW,YAAYH,GACpBP,SAASpB,KAAK8B,YAAYX,GAE1B,SAASY,EAAQC,GACf,GAAIA,EAAI,GACN,OAAOC,QAAQC,IAAI,iCAErB,IACEf,EAAQY,SACRZ,EAAQgB,UAAY,GACpB,MAAO5D,GACP6D,WAAW,WACTL,EAAOC,EAAI,IACV,KAIPD,CAAO,GASTM,SAAUC,EAAUrB,GAClB,MAAMsB,EAAUzB,OAAOC,OAAO,GAAIE,GAClCsB,EAAQC,QAAU1B,OAAOC,OAAO,GAAIwB,EAAQC,SACE,MAA1CD,EAAQC,QAAQ,yBAClBD,EAAQC,QAAQ,uBAA0B,yBAAwBF,MAEpE5E,KAAKsD,mBAAmBuB,EAAS,QAASD,GAW5CG,cAAc5D,MAAEA,EAAFyD,SAASA,GAAYrB,GACjC,MAAMsB,EAAUzB,OAAOC,OAAO,GAAIE,GAC9BqB,IACFC,EAAQC,QAAU1B,OAAOC,OAAO,GAAIwB,EAAQC,SACE,MAA1CD,EAAQC,QAAQ,yBAClBD,EAAQC,QAAQ,uBAA0B,qBAAoBF,OAIlE5E,KAAKsD,mBAAmBuB,EAAS,SAAU1D,GAQjChB,aAAE6E,GACZ,MAAMjF,aAAiBkF,iBAAiB,CAAE7C,OAAQ,OAAQC,KAAM,cAAeC,KAAM0C,IACrF,WAAWnF,EAAeE,GAO5BmF,eACE,WAAWhD,GAITiD,MAAAA,EAAmB,IAAIjD,EAC7BwC,WAAW,gBACmBU,IAAxB5D,OAAO6D,cACTA,aAAaF,IAEd"}