{"version":3,"file":"jsreport.js","sources":["../src/jsreport.js"],"sourcesContent":["/* globals jsreportInit */\r\nimport { saveAs } from 'file-saver'\r\n\r\nclass RenderResponse {\r\n  constructor (res) {\r\n    this._response = res\r\n  }\r\n\r\n  /**\r\n   * Return the fetch original response\r\n   */\r\n  get response () {\r\n    return this._response\r\n  }\r\n\r\n  /**\r\n   * Returns Promise<string> content of the response\r\n   * @returns {Promise<string>}\r\n   */\r\n  async toString () {\r\n    const blob = await this.response.blob()\r\n    return blob.text()\r\n  }\r\n\r\n  /**\r\n   * Invoke save of the output content as the file\r\n   * @param {string} afilename  - filename to save the file as\r\n   */\r\n  async download (afilename) {\r\n    const blob = await this.response.blob()\r\n    saveAs(blob, afilename)\r\n  }\r\n\r\n  /**\r\n   * Returns Promise<Blob> content of the response\r\n   * @returns {Promise<Blob>}\r\n   */\r\n  async toBlob () {\r\n    return this.response.blob()\r\n  }\r\n\r\n  /**\r\n   *  Return Promise<string> data URI of the response\r\n   * @returns {Promise<string>}\r\n   */\r\n  async toDataURI () {\r\n    const reader = new FileReader()\r\n    const blob = await this.response.blob()\r\n    return new Promise((resolve) => {\r\n      reader.onload = function (e) {\r\n        resolve(reader.result)\r\n      }\r\n      reader.readAsDataURL(blob)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Opens the response content in a new browser window\r\n   * @param {Object} options - optinal configs passed to the window.open\r\n   * @param {string} options.windowName - name of the window\r\n   * @param {string} options.windowFeatures - features of the window\r\n   * @param {Number} options.cleanInterval - how often to check if the window is closed to clean up the object URL\r\n   * @returns {Promise<Window}\r\n   */\r\n  async openInWindow ({\r\n    cleanInterval = 5000,\r\n    windowName,\r\n    windowFeatures\r\n  } = { }) {\r\n    const blob = await this.response.blob()\r\n    const objectURL = URL.createObjectURL(blob, windowName, windowFeatures)\r\n    const w = window.open(objectURL)\r\n    const interval = setInterval(() => {\r\n      if (w.closed) {\r\n        URL.revokeObjectURL(objectURL)\r\n        clearInterval(interval)\r\n      }\r\n    }, cleanInterval)\r\n    return w\r\n  }\r\n\r\n  /**\r\n   * Return the response as object URL. Remember you need to revoke the object URL when you are done with it\r\n   * @returns {Promise<string>}\r\n   */\r\n  async toObjectURL () {\r\n    const blob = await this.response.blob()\r\n    return URL.createObjectURL(blob)\r\n  }\r\n}\r\n\r\nclass JsReportClient {\r\n  constructor () {\r\n    this.headers = {}\r\n  }\r\n\r\n  async _jsreportRequest ({ method, path, body }) {\r\n    if (!this.serverUrl) {\r\n      throw new Error('The script was not linked from jsreport. You need to fill jsreport.serverUrl property with valid url to jsreport server.')\r\n    }\r\n\r\n    let res\r\n    try {\r\n      res = await fetch(this.serverUrl + path, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...this.headers\r\n        },\r\n        body: body != null ? JSON.stringify(body) : null,\r\n        method\r\n      })\r\n    } catch (e) {\r\n      throw new Error('Failed to connect to jsreport server.')\r\n    }\r\n\r\n    if (!res.ok) {\r\n      let error = {\r\n        message: `jsreport server responded with error. status text: ${res.statusText}, status code: ${res.status}`\r\n      }\r\n      try {\r\n        const blob = await res.blob()\r\n        const text = await blob.text()\r\n        const remoteError = JSON.parse(text)\r\n        error = {\r\n          ...remoteError,\r\n          message: `${error.message}, details: ${remoteError.message}`\r\n        }\r\n      } catch (e) {\r\n\r\n      }\r\n      const returnError = new Error(error.message)\r\n      Object.assign(returnError, {\r\n        status: res.status,\r\n        statusText: res.statusText,\r\n        error\r\n      })\r\n      throw returnError\r\n    }\r\n\r\n    return res\r\n  }\r\n\r\n  /**\r\n   * Render report in remote server\r\n   * @param {RenderRequest} renderRequest\r\n   * @returns {Promise<RenderResponse>}\r\n   */\r\n  async render (renderRequest) {\r\n    const res = await this._jsreportRequest({ method: 'POST', path: '/api/report', body: renderRequest })\r\n    return new RenderResponse(res)\r\n  }\r\n\r\n  /**\r\n   * Create new instance of the client, this is rarely needed and you can use the default in the most of the cases\r\n   * @returns {JsReportClient}\r\n   */\r\n  createClient () {\r\n    return new JsReportClient()\r\n  }\r\n}\r\n\r\nconst jsreportInstance = new JsReportClient()\r\nsetTimeout(function () {\r\n  if (window.jsreportInit !== undefined) {\r\n    jsreportInit(jsreportInstance)\r\n  }\r\n}, 0)\r\n\r\nexport default jsreportInstance\r\n"],"names":["_catch","body","recover","result","e","then","RenderResponse","res","this","_response","toString","response","blob","text","download","afilename","saveAs","toBlob","toDataURI","reader","FileReader","Promise","resolve","onload","readAsDataURL","openInWindow","cleanInterval","windowName","windowFeatures","objectURL","URL","createObjectURL","w","window","open","interval","setInterval","closed","revokeObjectURL","clearInterval","toObjectURL","jsreportInstance","headers","_jsreportRequest","method","path","ok","returnError","Error","error","message","Object","assign","status","statusText","remoteError","JSON","parse","_this14","serverUrl","fetch","stringify","render","renderRequest","createClient","JsReportClient","setTimeout","undefined","jsreportInit"],"mappings":"80FAkjBO,SAASA,EAAOC,EAAMC,GAC5B,IACC,IAAIC,EAASF,IACZ,MAAMG,GACP,OAAOF,EAAQE,GAEhB,OAAID,GAAUA,EAAOE,KACbF,EAAOE,UAAK,EAAQH,GAErBC,MAxjBFG,0BACJ,WAAaC,GACXC,KAAKC,UAAYF,+BAcbG,+CACeF,KAAKG,SAASC,sBAA3BA,GACN,OAAOA,EAAKC,+CAORC,kBAAUC,8BACKP,KAAKG,SAASC,sBAA3BA,GACNI,SAAOJ,EAAMG,2CAOTE,sBACJ,uBAAOT,KAAKG,SAASC,8CAOjBM,6BACEC,EAAS,IAAIC,WADF,uBAEEZ,KAAKG,SAASC,sBAA3BA,GACN,WAAWS,QAAQ,SAACC,GAClBH,EAAOI,OAAS,SAAUnB,GACxBkB,EAAQH,EAAOhB,SAEjBgB,EAAOK,cAAcZ,6CAYnBa,0CAIF,SAHFC,cAAAA,aAAgB,MAChBC,IAAAA,WACAC,IAAAA,0CAEmBpB,KAAKG,SAASC,sBAA3BA,GACN,IAAMiB,EAAYC,IAAIC,gBAAgBnB,EAAMe,EAAYC,GAClDI,EAAIC,OAAOC,KAAKL,GAChBM,EAAWC,YAAY,WACvBJ,EAAEK,SACJP,IAAIQ,gBAAgBT,GACpBU,cAAcJ,KAEfT,GACH,OAAOM,0CAOHQ,kDACehC,KAAKG,SAASC,aAC1BkB,IAAIC,6EA5Eb,WACE,YAAYtB,wMAqJVgC,EAAmB,4BArEvB,aACEjC,KAAKkC,QAAU,8BAGXC,iCAAoBC,IAAAA,OAAQC,IAAAA,KAAM5C,IAAAA,aAKlCM,IAJCC,wCAkBAD,EAAIuC,qBAeP,IAAMC,EAAc,IAAIC,MAAMC,EAAMC,SAMpC,MALAC,OAAOC,OAAOL,EAAa,CACzBM,OAAQ9C,EAAI8C,OACZC,WAAY/C,EAAI+C,WAChBL,MAAAA,IAEIF,GApBFE,EAAQ,CACVC,8DAA+D3C,EAAI+C,6BAA4B/C,EAAI8C,8CAGhF9C,EAAIK,sBAAjBA,0BACaA,EAAKC,sBAAlBA,GACN,IAAM0C,EAAcC,KAAKC,MAAM5C,GAC/BoC,OACKM,GACHL,QAAYD,EAAMC,sBAAqBK,EAAYL,2GAclD3C,IAAAA,GA1CP,IAAKmD,EAAKC,UACR,UAAUX,MAAM,4HAF4B,0CAOhCY,MAAMF,EAAKC,UAAYd,EAAM,CACvCH,WACE,eAAgB,oBACbgB,EAAKhB,SAEVzC,KAAc,MAARA,EAAeuD,KAAKK,UAAU5D,GAAQ,KAC5C2C,OAAAA,sBANFrC,kBASA,UAAUyC,MAAM,iIAmCdc,gBAAQC,8BACMvD,KAAKmC,iBAAiB,CAAEC,OAAQ,OAAQC,KAAM,cAAe5C,KAAM8D,mBAA/ExD,GACN,WAAWD,EAAeC,2CAO5ByD,aAAA,WACE,WAAWC,SAKfC,WAAW,gBACmBC,IAAxBlC,OAAOmC,cACTA,aAAa3B,IAEd"}