{"version":3,"file":"jsreport.module.js","sources":["../src/jsreport.js"],"sourcesContent":["/* globals jsreportInit */\r\nimport { saveAs } from 'file-saver'\r\n\r\nclass RenderResponse {\r\n  constructor (res) {\r\n    this._response = res\r\n  }\r\n\r\n  /**\r\n   * Return the fetch original response\r\n   */\r\n  get response () {\r\n    return this._response\r\n  }\r\n\r\n  /**\r\n   * Returns Promise<string> content of the response\r\n   * @returns {Promise<string>}\r\n   */\r\n  async toString () {\r\n    const blob = await this.response.blob()\r\n    return blob.text()\r\n  }\r\n\r\n  /**\r\n   * Invoke save of the output content as the file\r\n   * @param {string} afilename  - filename to save the file as\r\n   */\r\n  async download (afilename) {\r\n    const blob = await this.response.blob()\r\n    saveAs(blob, afilename)\r\n  }\r\n\r\n  /**\r\n   * Returns Promise<Blob> content of the response\r\n   * @returns {Promise<Blob>}\r\n   */\r\n  async toBlob () {\r\n    return this.response.blob()\r\n  }\r\n\r\n  /**\r\n   *  Return Promise<string> data URI of the response\r\n   * @returns {Promise<string>}\r\n   */\r\n  async toDataURI () {\r\n    const reader = new FileReader()\r\n    const blob = await this.response.blob()\r\n    return new Promise((resolve) => {\r\n      reader.onload = function (e) {\r\n        resolve(reader.result)\r\n      }\r\n      reader.readAsDataURL(blob)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Opens the response content in a new browser window\r\n   * @param {Object} options - optinal configs passed to the window.open\r\n   * @param {string} options.windowName - name of the window\r\n   * @param {string} options.windowFeatures - features of the window\r\n   * @param {Number} options.cleanInterval - how often to check if the window is closed to clean up the object URL\r\n   * @param {Number} options.title - tab title name\r\n   * @returns {Promise<Window}\r\n   */\r\n  async openInWindow ({\r\n    cleanInterval = 5000,\r\n    windowName,\r\n    windowFeatures,\r\n    title\r\n  } = { }) {\r\n    const blob = await this.response.blob()\r\n    const objectURL = URL.createObjectURL(blob, windowName, windowFeatures)\r\n\r\n    const previewURL = window.URL.createObjectURL(new Blob([`\r\n    <html>\r\n      <head>\r\n        <title>${title || 'report'}</title>\r\n        <style>\r\n          html, body {\r\n            margin: 0px;\r\n            width: 100%;\r\n            height: 100%;\r\n          }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <iframe src=\"${objectURL}\" frameborder=\"0\" width=\"100%\" height=\"100%\" />\r\n      </body>\r\n    </html>\r\n  `], { type: 'text/html' }))\r\n\r\n    const w = window.open(previewURL)\r\n    const interval = setInterval(() => {\r\n      if (w && w.closed) {\r\n        URL.revokeObjectURL(objectURL)\r\n        URL.revokeObjectURL(previewURL)\r\n        clearInterval(interval)\r\n      }\r\n    }, cleanInterval)\r\n    return w\r\n  }\r\n\r\n  /**\r\n   * Return the response as object URL. Remember you need to revoke the object URL when you are done with it\r\n   * @returns {Promise<string>}\r\n   */\r\n  async toObjectURL () {\r\n    const blob = await this.response.blob()\r\n    return URL.createObjectURL(blob)\r\n  }\r\n}\r\n\r\nclass JsReportClient {\r\n  constructor () {\r\n    this.headers = {}\r\n  }\r\n\r\n  async _jsreportRequest ({ method, path, body }) {\r\n    if (!this.serverUrl) {\r\n      throw new Error('The script was not linked from jsreport. You need to fill jsreport.serverUrl property with valid url to jsreport server.')\r\n    }\r\n\r\n    let res\r\n    try {\r\n      res = await fetch(this.serverUrl + path, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...this.headers\r\n        },\r\n        body: body != null ? JSON.stringify(body) : null,\r\n        method\r\n      })\r\n    } catch (e) {\r\n      throw new Error('Failed to connect to jsreport server.')\r\n    }\r\n\r\n    if (!res.ok) {\r\n      let error = {\r\n        message: `jsreport server responded with error. status text: ${res.statusText}, status code: ${res.status}`\r\n      }\r\n      try {\r\n        const blob = await res.blob()\r\n        const text = await blob.text()\r\n        const remoteError = JSON.parse(text)\r\n        error = {\r\n          ...remoteError,\r\n          message: `${error.message}, details: ${remoteError.message}`\r\n        }\r\n      } catch (e) {\r\n\r\n      }\r\n      const returnError = new Error(error.message)\r\n      Object.assign(returnError, {\r\n        status: res.status,\r\n        statusText: res.statusText,\r\n        error\r\n      })\r\n      throw returnError\r\n    }\r\n\r\n    return res\r\n  }\r\n\r\n  _submitFormRequest (req, target, title) {\r\n    const mapForm = document.createElement('form')\r\n    mapForm.target = target\r\n    mapForm.id = new Date().getTime()\r\n    mapForm.method = 'POST'\r\n    mapForm.action = this.serverUrl + '/api/report/' + encodeURIComponent(title)\r\n\r\n    const input = document.createElement('input')\r\n    input.type = 'hidden'\r\n    input.name = 'renderRequestContent'\r\n    input.value = JSON.stringify(req)\r\n    mapForm.appendChild(input)\r\n    document.body.appendChild(mapForm)\r\n\r\n    function submit (i) {\r\n      if (i > 10) {\r\n        return console.log('Unable to submit render form.')\r\n      }\r\n      try {\r\n        mapForm.submit()\r\n        mapForm.outerHTML = ''\r\n      } catch (e) {\r\n        setTimeout(function () {\r\n          submit(i + 1)\r\n        }, 50)\r\n      }\r\n    }\r\n\r\n    submit(0)\r\n  }\r\n\r\n  /**\r\n   * Render report in remote server and initiate download\r\n   * This method doesnt support submiting to jsreport with authentification enabled\r\n   * @param {filename} new tab title\r\n   * @param {RenderRequest} renderRequest\r\n   */\r\n  download (filename, req) {\r\n    const request = Object.assign({}, req)\r\n    request.options = Object.assign({}, request.options)\r\n    if (request.options['Content-Disposition'] == null) {\r\n      request.options['Content-Disposition'] = `attachment; filename=\"${filename}\"`\r\n    }\r\n    this._submitFormRequest(request, '_self', filename)\r\n  }\r\n\r\n  /**\r\n   * Render report in remote server and open in new tab\r\n   * This method doesnt support submiting to jsreport with authentification enabled\r\n   * @param {Object} options\r\n   * @param {string} options.filename\r\n   * @param {string} options.title\r\n   * @param {RenderRequest} renderRequest\r\n   */\r\n  openInWindow ({ title, filename }, req) {\r\n    const request = Object.assign({}, req)\r\n    if (filename) {\r\n      request.options = Object.assign({}, request.options)\r\n      if (request.options['Content-Disposition'] == null) {\r\n        request.options['Content-Disposition'] = `inline; filename=\"${filename}\"`\r\n      }\r\n    }\r\n\r\n    this._submitFormRequest(request, '_blank', title)\r\n  }\r\n\r\n  /**\r\n   * Render report in remote server\r\n   * @param {RenderRequest} renderRequest\r\n   * @returns {Promise<RenderResponse>}\r\n   */\r\n  async render (renderRequest) {\r\n    const res = await this._jsreportRequest({ method: 'POST', path: '/api/report', body: renderRequest })\r\n    return new RenderResponse(res)\r\n  }\r\n\r\n  /**\r\n   * Create new instance of the client, this is rarely needed and you can use the default in the most of the cases\r\n   * @returns {JsReportClient}\r\n   */\r\n  createClient () {\r\n    return new JsReportClient()\r\n  }\r\n}\r\n\r\nconst jsreportInstance = new JsReportClient()\r\nsetTimeout(function () {\r\n  if (window.jsreportInit !== undefined) {\r\n    jsreportInit(jsreportInstance)\r\n  }\r\n}, 0)\r\n\r\nexport default jsreportInstance\r\n"],"names":["_catch","body","recover","result","e","then","RenderResponse","res","this","_response","toString","response","blob","text","download","afilename","saveAs","toBlob","toDataURI","reader","FileReader","Promise","resolve","onload","readAsDataURL","openInWindow","cleanInterval","windowName","windowFeatures","title","objectURL","URL","createObjectURL","previewURL","window","Blob","type","w","open","interval","setInterval","closed","revokeObjectURL","clearInterval","toObjectURL","jsreportInstance","headers","_jsreportRequest","method","path","ok","returnError","Error","error","message","Object","assign","status","statusText","remoteError","JSON","parse","_this14","serverUrl","fetch","stringify","_submitFormRequest","req","target","mapForm","document","createElement","id","Date","getTime","action","encodeURIComponent","input","name","value","appendChild","submit","i","console","log","outerHTML","setTimeout","filename","request","options","render","renderRequest","createClient","JsReportClient","undefined","jsreportInit"],"mappings":"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"}